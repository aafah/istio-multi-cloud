apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default  #name of the policy
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
    
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-token-req
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: http://keycloak-service.kcloak.svc.cluster.local:8080/realms/appcloak
    jwksUri: http://keycloak-service.kcloak.svc.cluster.local:8080/realms/appcloak/protocol/openid-connect/certs
    forwardOriginalToken: true
    fromHeaders: 
      - name: Authorization
        prefix: "Bearer "

#---
#apiVersion: install.istio.io/v1alpha1
#kind: IstioOperator
#metadata:
#  name: custom-prov
#spec:
#  meshConfig:
#    accessLogFile: /dev/stdout
#    extensionProviders:
#    - name: "oauth2-proxy"
#      envoyExtAuthzHttp:
#        service: "oauth-proxy-service.default.svc.cluster.local"
#        port: "4180" # The default port used by oauth2-proxy.
#        includeHeadersInCheck: ["authorization", "cookie","x-forwarded-access-token","x-forwarded-user","x-forwarded-email","x-forwarded-proto","proxy-authorization","user-agent","x-forwarded-host","from","x-forwarded-for","accept","x-auth-request-redirect"] # headers sent to the oauth2-proxy in the check request.
#        headersToUpstreamOnAllow: ["authorization", "path", "x-auth-request-user", "x-auth-request-email", "x-auth-request-access-token","x-forwarded-access-token"] # headers sent to backend application when request is allowed.
#        headersToDownstreamOnDeny: ["content-type", "set-cookie"] # headers sent back to the client when request is denied.
        